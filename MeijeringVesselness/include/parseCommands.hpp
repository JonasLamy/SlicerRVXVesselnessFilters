// This file was automatically generated by:
//  /home/skvader/sources/SlicerExecutionModel/build/GenerateCLP/bin/GenerateCLP --InputXML /home/skvader/programming/these/SlicerVesselness/MeijeringVesselness/Meijering.xml --returnparameterfile paramFiles.txt --OutputCxx parseCommands.hpp
//
#include <cstdio>
#include <cstdlib>
#include <iostream>
#include <string>
#include <vector>
#include <map>

#include <sstream>

#include "tclap/CmdLine.h"
#include "ModuleProcessInformation.h"

#ifdef _WIN32
#define Module_EXPORT __declspec(dllexport)
#elif defined(MODULE_HIDDEN_VISIBILITY)
#define Module_EXPORT __attribute__((visibility("default")))
#else
#define Module_EXPORT
#endif

#if defined(main) && !defined(REGISTER_TEST)
// If main defined as a preprocessor symbol, redefine it to the expected entry point.
#undef main
#define main ModuleEntryPoint

extern "C" {
  Module_EXPORT char *GetXMLModuleDescription();
  Module_EXPORT int ModuleEntryPoint(int, char*[]);
}
#endif

extern "C" {
Module_EXPORT char XMLModuleDescription[] = 
"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n"
"<executable>\n"
"    <category>Vesselness</category>\n"
"    <title>Meijering Vesselness Filter</title>\n"
"    <description>\n"
"        Meijering Vesselness filter, designed to improve results over thin vessels.\n"
"    </description>\n"
"    <version>1.0</version>\n"
"    <documentation-url></documentation-url>\n"
"    <license></license>\n"
"    <contributor>Jonas Lamy</contributor>\n"
"\n"
"    <parameters>\n"
"        <label>\n"
"            Scale space parameters\n"
"        </label>\n"
"        <description>\n"
"            Scale parameters are defined by smallest scale, largest scale and the number of scales analysed in between\n"
"            [scaleMin,scaleMax]\n"
"        </description>\n"
"\n"
"        <double>\n"
"            <name>sigmaMin</name>\n"
"            <flag>m</flag>\n"
"            <longflag>sigmaMin</longflag>\n"
"            <description>minimum sigma</description>\n"
"            <label>minimum sigma</label>\n"
"            <default>1</default>\n"
"            <constraints>\n"
"                <minimum>0</minimum>\n"
"                <maximum>50</maximum>\n"
"                <step>.01</step>\n"
"            </constraints>\n"
"        </double>\n"
"\n"
"        <double>\n"
"            <name>sigmaMax</name>\n"
"            <flag>M</flag>\n"
"            <longflag>sigmaMax</longflag>\n"
"            <description>maximum sigma</description>\n"
"            <label>maximum sigma</label>\n"
"            <default>1</default>\n"
"            <constraints>\n"
"                <minimum>0</minimum>\n"
"                <maximum>50</maximum>\n"
"                <step>.01</step>\n"
"            </constraints>\n"
"        </double>\n"
"\n"
"        <integer>\n"
"            <name>numberOfScales</name>\n"
"            <flag>n</flag>\n"
"            <longflag>nbSteps</longflag>\n"
"            <description>Number of scales between [sigmaMin,sigmaMax]</description>\n"
"            <label>Scales</label>\n"
"            <default>4</default>\n"
"            <constraints>\n"
"                <minimum>2</minimum>\n"
"                <maximum>30</maximum>\n"
"                <step>1</step>\n"
"            </constraints>\n"
"        </integer>\n"
"\n"
"    </parameters>\n"
"\n"
"    <parameters>\n"
"        <label>\n"
"            Meijering's parameters\n"
"        </label>\n"
"        <double>\n"
"            <name>Alpha</name>\n"
"            <label>Alpha</label>\n"
"            <flag>t</flag>\n"
"            <longflag>alpha</longflag>\n"
"            <default>-0.66</default>\n"
"            <constraints>\n"
"                <minimum>-5</minimum>\n"
"                <maximum>5</maximum>\n"
"                <step>0.01</step>\n"
"            </constraints>\n"
"        </double>\n"
"    </parameters>\n"
"\n"
"    <parameters>\n"
"        <label>IO</label>\n"
"        <description>Input/output images</description>\n"
"        <image>\n"
"            <name>inputVolume</name>\n"
"            <label>Input Volume</label>\n"
"            <channel>input</channel>\n"
"            <flag>i</flag>\n"
"            <longflag>inputVolume</longflag>\n"
"            <description>Input volume to be filtered</description>\n"
"        </image>\n"
"        <label>IO</label>\n"
"        <description>Input/output images</description>\n"
"        <image>\n"
"            <name>maskVolume</name>\n"
"            <label>mask volume</label>\n"
"            <channel>input</channel>\n"
"            <flag>k</flag>\n"
"            <longflag>maskVolume</longflag>\n"
"            <description>mask to be applied on the vesselness</description>\n"
"        </image>\n"
"        <image>\n"
"            <name>outputVolume</name>\n"
"            <label>Output Volume</label>\n"
"            <channel>output</channel>\n"
"            <flag>o</flag>\n"
"            <longflag>outputVolume</longflag>\n"
"            <description>Output filtered</description>\n"
"        </image>\n"
"    </parameters>\n"
"</executable>\n"
"\n"
;

}

void
splitString (const std::string &text,
             const std::string &separators,
             std::vector<std::string> &words)
{
  const std::string::size_type n = text.length();
  std::string::size_type start = text.find_first_not_of(separators);
  while (start < n)
    {
    std::string::size_type stop = text.find_first_of(separators, start);
    if (stop > n) stop = n;
    words.push_back(text.substr(start, stop - start));
    start = text.find_first_not_of(separators, stop+1);
    }
}

void
splitFilenames (const std::string &text,
                std::vector<std::string> &words)
{
  const std::string::size_type n = text.length();
  bool quoted;
  std::string comma(",");
  std::string quote("\"");
  std::string::size_type start = text.find_first_not_of(comma);
  while (start < n)
    {
    quoted = false;
    std::string::size_type startq = text.find_first_of(quote, start);
    std::string::size_type stopq = text.find_first_of(quote, startq+1);
    std::string::size_type stop = text.find_first_of(comma, start);
    if (stop > n) stop = n;
    if (startq != std::string::npos && stopq != std::string::npos)
      {
      while (startq < stop && stop < stopq && stop != n)
         {
         quoted = true;
         stop = text.find_first_of(comma, stop+1);
         if (stop > n) stop = n;
         }
      }
    if (!quoted)
      {
      words.push_back(text.substr(start, stop - start));
      }
    else
      {
      words.push_back(text.substr(start+1, stop - start-2));
      }
    start = text.find_first_not_of(comma, stop+1);
    }
}

char *GetXMLModuleDescription()
{
   return XMLModuleDescription;
}

#define GENERATE_LOGO
#define GENERATE_XML \
  if (argc >= 2 && (strcmp(argv[1],"--xml") == 0)) \
    { \
    std::cout << GetXMLModuleDescription(); \
    return EXIT_SUCCESS; \
    }
#define GENERATE_DECLARE \
    /* These two vectors are used to store the JSON deserialized value */ \
    /* that are then compiled with the command line. */ \
    std::vector< std::string > deserializedVectorFlaggedArgs; \
    std::vector< std::string > deserializedVectorPositionalArgs; \
    /* This map is used to store the JSON deserialized value of multiple args*/ \
    /* where the key is the argument flag and the value the values of each arg. */ \
    std::map< std::string, std::vector<std::string> > deserializedMultipleArgsMap; \
 \
    /* This vector is used to look up if a flag requires an argument after it. */ \
    /* This is used to differentiate between: */ \
    /* ./myExec --boolFlag /my/first/arg */ \
    /* ./myExec --flag flagArg */ \
    std::vector< std::string > nonbooleanFlags; \
    nonbooleanFlags.push_back("-m"); \
    nonbooleanFlags.push_back("--sigmaMin"); \
    nonbooleanFlags.push_back("-M"); \
    nonbooleanFlags.push_back("--sigmaMax"); \
    nonbooleanFlags.push_back("-n"); \
    nonbooleanFlags.push_back("--nbSteps"); \
    nonbooleanFlags.push_back("-t"); \
    nonbooleanFlags.push_back("--alpha"); \
    nonbooleanFlags.push_back("-i"); \
    nonbooleanFlags.push_back("--inputVolume"); \
    nonbooleanFlags.push_back("-k"); \
    nonbooleanFlags.push_back("--maskVolume"); \
    nonbooleanFlags.push_back("-o"); \
    nonbooleanFlags.push_back("--outputVolume"); \
    nonbooleanFlags.push_back("--processinformationaddress"); \
    nonbooleanFlags.push_back("--returnparameterfile"); \
    /* This map use is twofold: */ \
    /*  - to find whether a flag is multiple */ \
    /*  - to know if we need to reset the multiple arg value because it was */ \
    /*    in the JSON and it's also in the command line. */ \
    std::map<std::string, bool> multipleFlags; \
    double sigmaMin = 1; \
    double sigmaMax = 1; \
    int numberOfScales = 4; \
    double Alpha = -0.66; \
    std::string inputVolume; \
    std::string maskVolume; \
    std::string outputVolume; \
    bool echoSwitch = false; \
    bool xmlSwitch = false; \
    std::string processInformationAddressString = "0"; \
    std::string returnParameterFile; \

#define GENERATE_TCLAP_PARSE \
    std::string fullDescription("Description: "); \
    fullDescription += "\n        Meijering Vesselness filter, designed to improve results over thin vessels.\n"; \
    if (!std::string("Jonas Lamy").empty()) \
      { \
      fullDescription += "\nAuthor(s): Jonas Lamy"; \
      } \
    if (!std::string("Thank you everyone.").empty()) \
      { \
      fullDescription += "\nAcknowledgements: Thank you everyone."; \
      } \
    TCLAP::CmdLine commandLine (fullDescription, \
       ' ', \
      "1.0" ); \
 \
      std::ostringstream msg; \
    msg.str("");msg << "minimum sigma (value: " << sigmaMin << ")"; \
    TCLAP::ValueArg<double > sigmaMinArg("m", "sigmaMin", msg.str(), 0, sigmaMin, "double", commandLine); \
 \
    msg.str("");msg << "maximum sigma (value: " << sigmaMax << ")"; \
    TCLAP::ValueArg<double > sigmaMaxArg("M", "sigmaMax", msg.str(), 0, sigmaMax, "double", commandLine); \
 \
    msg.str("");msg << "Number of scales between [sigmaMin,sigmaMax] (value: " << numberOfScales << ")"; \
    TCLAP::ValueArg<int > numberOfScalesArg("n", "nbSteps", msg.str(), 0, numberOfScales, "int", commandLine); \
 \
    msg.str("");msg << " (value: " << Alpha << ")"; \
    TCLAP::ValueArg<double > AlphaArg("t", "alpha", msg.str(), 0, Alpha, "double", commandLine); \
 \
    msg.str("");msg << "Input volume to be filtered";    TCLAP::ValueArg<std::string > inputVolumeArg("i", "inputVolume", msg.str(), 0, inputVolume, "std::string", commandLine); \
 \
    msg.str("");msg << "mask to be applied on the vesselness";    TCLAP::ValueArg<std::string > maskVolumeArg("k", "maskVolume", msg.str(), 0, maskVolume, "std::string", commandLine); \
 \
    msg.str("");msg << "Output filtered";    TCLAP::ValueArg<std::string > outputVolumeArg("o", "outputVolume", msg.str(), 0, outputVolume, "std::string", commandLine); \
 \
    msg.str("");msg << "Echo the command line arguments (value: " << echoSwitch << ")"; \
    TCLAP::SwitchArg echoSwitchArg("", "echo", msg.str(), commandLine, echoSwitch); \
 \
    msg.str("");msg << "Produce xml description of command line arguments (value: " << xmlSwitch << ")"; \
    TCLAP::SwitchArg xmlSwitchArg("", "xml", msg.str(), commandLine, xmlSwitch); \
 \
    msg.str("");msg << "Address of a structure to store process information (progress, abort, etc.). (value: " << processInformationAddressString << ")"; \
    TCLAP::ValueArg<std::string > processInformationAddressStringArg("", "processinformationaddress", msg.str(), 0, processInformationAddressString, "std::string", commandLine); \
 \
    msg.str("");msg << "Filename in which to write simple return parameters (int, float, int-vector, etc.) as opposed to bulk return parameters (image, geometry, transform, measurement, table).";    TCLAP::ValueArg<std::string > returnParameterFileArg("", "returnparameterfile", msg.str(), 0, returnParameterFile, "std::string", commandLine); \
 \
try \
  { \
    /* Build a map of flag aliases to the true flag */ \
    std::map<std::string,std::string> flagAliasMap; \
    std::map<std::string,std::string> deprecatedFlagAliasMap; \
    std::map<std::string,std::string> longFlagAliasMap; \
    std::map<std::string,std::string> deprecatedLongFlagAliasMap; \
 \
    /* Go through argc and consolidate the JSON with the parameters from the command line */ \
    /* In case of conflict, take the command line. */ \
    std::map<std::string,std::string>::iterator ait; \
    std::map<std::string,std::string>::iterator dait; \
    std::vector<std::string>::iterator dvOptionnalArgsIt = deserializedVectorFlaggedArgs.begin(); \
    std::map<std::string, std::vector<std::string> >::iterator dvMultipleArgsIt; \
    size_t noFlagCounter = 0; \
    size_t ac = 1; \
 \
    while (ac < static_cast<size_t>(argc)) \
      { \
      /* short flag case && long flag case */ \
       if ((strlen(argv[ac]) == 2 && argv[ac][0]=='-') \
           || (strlen(argv[ac]) > 2 && argv[ac][0]=='-' && argv[ac][1]=='-')) \
         { \
         std::string flag = argv[ac]; \
         /* Remap the flag if necessary */ \
         if (strlen(argv[ac]) == 2) \
           { \
           /* Short flag remapping */ \
           ait = flagAliasMap.find(flag); \
           dait = deprecatedFlagAliasMap.find(flag); \
           if (ait != flagAliasMap.end()) \
             { \
             /* remap the flag */ \
             flag = (*ait).second; \
             } \
           else if (dait != deprecatedFlagAliasMap.end()) \
             { \
             std::cout << "Flag \"" << flag << "\" is deprecated. Please use flag \"" << (*dait).second << "\" instead. " << std::endl; \
             /* remap the flag */ \
             flag = (*dait).second; \
             } \
           } \
         else \
           { \
           /* Long flag remapping */ \
           ait = longFlagAliasMap.find(flag); \
           dait = deprecatedLongFlagAliasMap.find(flag); \
           if (ait != longFlagAliasMap.end()) \
             { \
             /* remap the flag */ \
             flag = (*ait).second; \
             } \
           else if (dait != deprecatedLongFlagAliasMap.end()) \
             { \
             std::cout << "Long flag \"" << flag << "\" is deprecated. Please use long flag \"" << (*dait).second << "\" instead. " << std::endl; \
             /* remap the flag */ \
             flag = (*dait).second; \
             } \
           } \
         bool isMultiple = multipleFlags.find(flag) != multipleFlags.end(); \
         bool isBoolean = std::find(nonbooleanFlags.begin(), nonbooleanFlags.end(), flag) == nonbooleanFlags.end(); \
         dvOptionnalArgsIt = std::find(deserializedVectorFlaggedArgs.begin(), deserializedVectorFlaggedArgs.end(), flag); \
         bool isPresentVFA = dvOptionnalArgsIt != deserializedVectorFlaggedArgs.end(); \
         if (isBoolean) \
           { \
           /*Ignore if boolean and already present*/ \
           /*Otherwise add it*/ \
           if (!isPresentVFA) \
             { \
             deserializedVectorFlaggedArgs.push_back(flag); \
             } \
           ++ac; \
           } \
         else if (isMultiple) \
           { \
           dvMultipleArgsIt = deserializedMultipleArgsMap.find(flag); \
           bool isPresentMA = dvMultipleArgsIt != deserializedMultipleArgsMap.end(); \
           /*Ignore if boolean and already present*/ \
           /*Reset/Add the value if first deserialize or not present*/ \
           if (!isPresentMA || !multipleFlags[flag]) \
             { \
             deserializedMultipleArgsMap[flag] = std::vector<std::string>(); \
             multipleFlags[flag] = true; \
             } \
           ++ac; \
           std::string value = ""; \
           if (ac < static_cast<size_t>(argc)) \
             { \
             value = argv[ac]; \
             ++ac; \
             } \
           deserializedMultipleArgsMap[flag].push_back(value); \
           } \
         else \
           { \
           /*Add the flag and if needed*/ \
           if (!isPresentVFA) \
             { \
             deserializedVectorFlaggedArgs.push_back(flag); \
             } \
           ++ac; \
           std::string value = ""; \
           if (ac < static_cast<size_t>(argc)) \
             { \
             value = argv[ac]; \
             ++ac; \
             } \
           if (!isPresentVFA) \
             { \
             deserializedVectorFlaggedArgs.push_back(value);  \
             } \
           else \
             { \
             *(++dvOptionnalArgsIt) = value; \
             } \
           } \
         } \
       /* short flag case where multiple flags are given at once */ \
       else if (strlen(argv[ac]) > 2 && argv[ac][0]=='-' && argv[ac][1]!='-') \
         { \
         std::string rflag(argv[ac], 1, std::string::npos); \
         for (std::string::size_type fi=0; fi < rflag.size(); ++fi) \
           { \
           std::string tf(rflag, fi, 1); \
           std::string newFlag ="-"; \
           newFlag += tf; \
           ait = flagAliasMap.find(newFlag); \
           dait = deprecatedFlagAliasMap.find(newFlag); \
           if (ait != flagAliasMap.end()) \
             { \
             /* remap the flag */ \
             newFlag = (*ait).second; \
             } \
           else if (dait != deprecatedFlagAliasMap.end()) \
             { \
             std::cout << "Flag \"" << newFlag << "\" is deprecated. Please use flag \"" << (*dait).second << "\" instead. " << std::endl; \
             /* remap the flag */ \
             newFlag = (*dait).second; \
             } \
           dvOptionnalArgsIt = std::find(deserializedVectorFlaggedArgs.begin(), deserializedVectorFlaggedArgs.end(), newFlag); \
           /*These flags are always boolean, just add it if it's not there already */ \
           if (dvOptionnalArgsIt == deserializedVectorFlaggedArgs.end()) \
             { \
             deserializedVectorFlaggedArgs.push_back(newFlag); \
             } \
           } \
         ++ac; \
         } \
       else \
         { \
         /* Replace if needed, otherwise append.*/ \
         if (noFlagCounter < deserializedVectorPositionalArgs.size()) \
           { \
           deserializedVectorPositionalArgs[noFlagCounter] = argv[ac]; \
           } \
         else \
           { \
           deserializedVectorPositionalArgs.push_back(argv[ac]); \
           } \
         ++ac; \
         ++noFlagCounter; \
         } \
       } \
 \
    /* Put the now compiled arguments in the argvVector */ \
    std::vector<std::string> argvVector; \
    argvVector.push_back(argv[0]); \
    argvVector.insert(argvVector.end(), deserializedVectorFlaggedArgs.begin(), deserializedVectorFlaggedArgs.end()); \
    std::map<std::string, std::vector<std::string> >::iterator mavit; \
    for (mavit = deserializedMultipleArgsMap.begin(); mavit != deserializedMultipleArgsMap.end(); ++mavit) \
      { \
      for (size_t i = 0; i < mavit->second.size(); ++i) \
        { \
        argvVector.push_back(mavit->first); \
        argvVector.push_back(mavit->second.at(i)); \
        } \
      } \
    argvVector.insert(argvVector.end(), deserializedVectorPositionalArgs.begin(), deserializedVectorPositionalArgs.end()); \
 \
   /* Remap args to a structure that CmdLine::parse() can understand*/ \
   std::vector<char*> vargs; \
   for (ac = 0; ac < argvVector.size(); ++ac) \
     {  \
     vargs.push_back(const_cast<char *>(argvVector[ac].c_str())); \
     } \
    commandLine.parse ( static_cast<int>(vargs.size()), (char**) &(vargs[0]) ); \
  } \
catch ( TCLAP::ArgException & e ) \
  { \
  std::cerr << "error: " << e.error() << " for arg " << e.argId() << std::endl; \
  return ( EXIT_FAILURE ); \
  }
#define GENERATE_TCLAP_ASSIGNMENT \
      sigmaMin = sigmaMinArg.getValue(); \
      sigmaMax = sigmaMaxArg.getValue(); \
      numberOfScales = numberOfScalesArg.getValue(); \
      Alpha = AlphaArg.getValue(); \
      inputVolume = inputVolumeArg.getValue(); \
      maskVolume = maskVolumeArg.getValue(); \
      outputVolume = outputVolumeArg.getValue(); \
      echoSwitch = echoSwitchArg.getValue(); \
      xmlSwitch = xmlSwitchArg.getValue(); \
      processInformationAddressString = processInformationAddressStringArg.getValue(); \
      returnParameterFile = returnParameterFileArg.getValue(); \

#define GENERATE_TCLAP GENERATE_TCLAP_PARSE;GENERATE_TCLAP_ASSIGNMENT
#define GENERATE_TCLAP_ASSIGNMENT_IFSET \
    if( sigmaMinArg.isSet() ) \
      { \
      sigmaMin = sigmaMinArg.getValue(); \
      } \
    if( sigmaMaxArg.isSet() ) \
      { \
      sigmaMax = sigmaMaxArg.getValue(); \
      } \
    if( numberOfScalesArg.isSet() ) \
      { \
      numberOfScales = numberOfScalesArg.getValue(); \
      } \
    if( AlphaArg.isSet() ) \
      { \
      Alpha = AlphaArg.getValue(); \
      } \
    if( inputVolumeArg.isSet() ) \
      { \
      inputVolume = inputVolumeArg.getValue(); \
      } \
    if( maskVolumeArg.isSet() ) \
      { \
      maskVolume = maskVolumeArg.getValue(); \
      } \
    if( outputVolumeArg.isSet() ) \
      { \
      outputVolume = outputVolumeArg.getValue(); \
      } \
    if( echoSwitchArg.isSet() ) \
      { \
      echoSwitch = echoSwitchArg.getValue(); \
      } \
    if( xmlSwitchArg.isSet() ) \
      { \
      xmlSwitch = xmlSwitchArg.getValue(); \
      } \
    if( processInformationAddressStringArg.isSet() ) \
      { \
      processInformationAddressString = processInformationAddressStringArg.getValue(); \
      } \
    if( returnParameterFileArg.isSet() ) \
      { \
      returnParameterFile = returnParameterFileArg.getValue(); \
      } \

#define GENERATE_ECHOARGS \
if (echoSwitch) \
{ \
std::cout << "Command Line Arguments" << std::endl; \
std::cout << "    sigmaMin: " << sigmaMin << std::endl; \
std::cout << "    sigmaMax: " << sigmaMax << std::endl; \
std::cout << "    numberOfScales: " << numberOfScales << std::endl; \
std::cout << "    Alpha: " << Alpha << std::endl; \
std::cout << "    inputVolume: " << inputVolume << std::endl; \
std::cout << "    maskVolume: " << maskVolume << std::endl; \
std::cout << "    outputVolume: " << outputVolume << std::endl; \
std::cout << "    echoSwitch: " << echoSwitch << std::endl; \
std::cout << "    xmlSwitch: " << xmlSwitch << std::endl; \
std::cout << "    processInformationAddressString: " << processInformationAddressString << std::endl; \
std::cout << "    returnParameterFile: " << returnParameterFile << std::endl; \
}
#define GENERATE_ProcessInformationAddressDecoding \
ModuleProcessInformation *CLPProcessInformation = 0; \
if (processInformationAddressString != "") \
{ \
sscanf(processInformationAddressString.c_str(), "%p", &CLPProcessInformation); \
}
#define PARSE_ARGS GENERATE_LOGO;GENERATE_XML;GENERATE_DECLARE;GENERATE_TCLAP;GENERATE_ECHOARGS;GENERATE_ProcessInformationAddressDecoding;
